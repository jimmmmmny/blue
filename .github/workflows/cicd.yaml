name: cicd-1
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev]
    paths:
    - 'my-app/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4

  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Docker build & push
      run: |
        # WAR 파일을 Docker 이미지에 포함시켜 빌드하고 푸시하는 명령어 실행
        # Dockerfile에서 WAR 파일을 알맞은 위치로 복사하고, 필요한 설정을 진행
        docker build -f /path/to/Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [ image-build ]
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.1
    - name: Access Kubernetes
      run: |
        aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
    - name: Deploy
      id: status
      run: |
        # WAR 파일을 Kubernetes 클러스터에 배포하는 명령어 실행
        # 예를 들어, kubectl apply 등을 사용하여 배포
    - name: Notify
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "message",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Environment: dev, Deploy Result: ${{ steps.status.outcome }}, Repository: ${{ github.repository }}."
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
