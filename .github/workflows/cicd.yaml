name: cicd-1
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev]
    paths:
    - 'my-app/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4

  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: Build and push nginx image
      run: |
        cd my-app/nginx
        docker build -f dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.NGINX_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.NGINX_REPOSITORY }}:${{ github.sha }}
    - name: Build and push tomcat image
      run: |
        cd my-app/tomcat
        docker build -f dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.TOMCAT_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.TOMCAT_REPOSITORY }}:${{ github.sha }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [ image-build ]
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: setup helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.1
    - name: access kubernetes
      run: |
        aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
    - name: nginx deploy
      run: |
        helm upgrade --install main-web kubernetes/nginx --install --create-namespace --namespace frontend-${{ vars.SUFFIX }} \
        --set image.tag=${{ github.sha }} \
        --set image.repository=${{ secrets.REGISTRY }}/${{ vars.NGINX_REPOSITORY }} \
        --set createNamespace=true \
        --atomic --wait
      continue-on-error: true
    - name: tomcat deploy
      run: |
        helm upgrade --install main-was kubernetes/tomcat --install --create-namespace --namespace backend-${{ vars.SUFFIX }} \
        --set image.tag=${{ github.sha }} \
        --set image.repository=${{ secrets.REGISTRY }}/${{ vars.TOMCAT_REPOSITORY }}/tomcat \
        --set createNamespace=true \
        --atomic --wait
      continue-on-error: true

  
